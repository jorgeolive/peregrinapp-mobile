import AsyncStorage from '@react-native-async-storage/async-storage';
import { io, Socket } from 'socket.io-client';
import { API_BASE_URL } from '../config';
import socketService from './socketService';

// Keys for AsyncStorage
const MESSAGES_STORAGE_KEY = 'chat_messages';
const CONVERSATIONS_STORAGE_KEY = 'chat_conversations';

export interface ChatMessage {
  messageId: string;
  senderId: string;
  recipientId: string;
  message: string;
  timestamp: number;
  status: 'sent' | 'delivered' | 'seen' | 'failed';
}

export interface MessageStatus {
  messageId: string;
  status: string;
}

export interface MessageSeen {
  messageId: string;
  seenBy: string;
}

export interface ChatUser {
  id: string;
  name: string;
  enableDms: boolean;
}

export interface Conversation {
  userId: string;
  name: string;
  lastMessage?: string;
  timestamp?: number;
  unreadCount: number;
}

class ChatService {
  private socket: Socket | null = null;
  private isConnected: boolean = false;
  private isAuthenticated: boolean = false;
  private currentUserId: string | null = null;
  
  // Callbacks for events
  private onNewMessage: ((message: ChatMessage) => void) | null = null;
  private onMessageStatus: ((status: MessageStatus) => void) | null = null;
  private onMessageSeen: ((data: MessageSeen) => void) | null = null;
  private onConnectionChange: ((connected: boolean) => void) | null = null;

  // Array to hold cleanup functions
  private _cleanupFunctions: (() => void)[] = [];

  /**
   * Initialize the chat service and connect to the server
   */
  public async init(): Promise<boolean> {
    try {
      console.log('[ChatService] Initializing chat service');
      
      // FORCE a socketService initialization to ensure socket is available
      // This is critical because we rely on socketService for our socket connection
      console.log('[ChatService] Forcing socketService initialization');
      const socketInitialized = await socketService.init();
      console.log(`[ChatService] socketService initialization result: ${socketInitialized}`);
      
      if (!socketInitialized) {
        console.error('[ChatService] socketService initialization failed, chat will not work');
        return false;
      }
      
      // Check if socketService already has an active connection
      const socketInfo = socketService.getDebugInfo();
      console.log('[ChatService] Socket status from socketService:', socketInfo);
      
      if (socketInfo.connected) {
        console.log('[ChatService] Using existing socket connection from socketService');
        this.isConnected = true;
        this.isAuthenticated = socketInfo.authenticated;
        
        // Get current user ID
        const authData = socketService.getAuthData();
        if (authData) {
          this.currentUserId = authData.userId;
          console.log(`[ChatService] Got current user ID: ${this.currentUserId}`);
        } else {
          console.warn('[ChatService] No auth data found in socketService, trying alternative sources');
          await this.retrieveUserIdFromStorage();
        }
        
        // Set up our event listeners on the existing socket connection
        this.setupEventListenersOnExistingSocket();
        
        // Verify listener setup
        console.log('[ChatService] Event listeners set up on existing socket');
        
        // Diagnostic: Test emitting a simple event
        const testEventSent = socketService.emitEvent('client_status', { status: 'chat_ready' });
        console.log('[ChatService] Test event emitted:', testEventSent);
        
        return true;
      }
      
      // If we get here, something went wrong with socketService initialization
      // but it didn't report an error. This shouldn't happen, but let's handle it.
      console.error('[ChatService] Socket reported as initialized but not connected');
      return false;
    } catch (error) {
      console.error('[ChatService] Error initializing chat service:', error);
      return false;
    }
  }
  
  /**
   * Helper to retrieve user ID from different storage sources
   */
  private async retrieveUserIdFromStorage(): Promise<void> {
    // Try to get from userData in AsyncStorage first
    try {
      const userData = await AsyncStorage.getItem('userData');
      if (userData) {
        const parsedUserData = JSON.parse(userData);
        if (parsedUserData.id) {
          this.currentUserId = parsedUserData.id;
          console.log('[ChatService] Retrieved user ID from userData:', this.currentUserId);
          return;
        }
      }
    } catch (error) {
      console.error('[ChatService] Error retrieving userData from AsyncStorage:', error);
    }
    
    // If that fails, try to get a token-based ID
    try {
      const token = await AsyncStorage.getItem('token');
      if (token) {
        // Create a temporary ID from the token
        this.currentUserId = `temp_${token.substring(0, 8)}`;
        console.log('[ChatService] Created temporary ID from token:', this.currentUserId);
      }
    } catch (error) {
      console.error('[ChatService] Error retrieving token from AsyncStorage:', error);
    }
  }
  
  /**
   * Set up event listeners on an existing socket, assuming socketService has the socket
   */
  private setupEventListenersOnExistingSocket(): void {
    // Instead of creating our own socket, we'll use socketService's socket through its helper methods
    console.log('[ChatService] Setting up event listeners through socketService');
    
    // Add persistent default message handler that always stores messages in AsyncStorage
    // regardless of whether any UI is listening
    const persistentMessageHandler = async (message: ChatMessage) => {
      console.log('[ChatService] Default handler: New message received through socketService');
      
      // Ensure the message has the properties we need
      if (!message || !message.messageId || !message.senderId || !message.recipientId) {
        console.error('[ChatService] Received malformed message:', message);
        return;
      }
      
      // Check and convert IDs to strings for local storage
      const enhancedMessage: ChatMessage = {
        ...message,
        // Ensure IDs are strings for our local storage
        senderId: String(message.senderId),
        recipientId: String(message.recipientId),
        // Ensure status is set
        status: message.status || 'delivered'
      };

      // Store message in AsyncStorage
      await this.storeMessage(enhancedMessage);
      
      // Update conversations
      await this.updateConversation(enhancedMessage);
      
      // Automatically mark as delivered
      socketService.emitEvent('message_delivered', {
        messageId: message.messageId,
        senderId: message.senderId
      });
      
      // Call the custom handler if one exists (e.g., for UI updates)
      if (this.onNewMessage) {
        console.log('[ChatService] Calling custom onNewMessage callback');
        this.onNewMessage(enhancedMessage);
      }
    };
    
    // Add persistent message status handler
    const persistentStatusHandler = async (status: MessageStatus) => {
      console.log('[ChatService] Default handler: Message status update through socketService:', status);
      
      // Validate status data
      if (!status || !status.messageId) {
        console.error('[ChatService] Received invalid message status update:', status);
        return;
      }
      
      // Determine if this is a valid status
      const validStatuses = ['sent', 'delivered', 'seen', 'failed'];
      if (!validStatuses.includes(status.status)) {
        console.warn(`[ChatService] Received unknown message status type: ${status.status}, treating as 'delivered'`);
        status.status = 'delivered';
      }
      
      // Update message status in AsyncStorage
      await this.updateMessageStatus(status.messageId, status.status);
      
      // Call the custom handler if one exists
      if (this.onMessageStatus) {
        console.log('[ChatService] Forwarding message status update to UI:', status);
        this.onMessageStatus(status);
      } else {
        console.log('[ChatService] No message status callback registered, UI won\'t update');
      }
    };
    
    // Add persistent message seen handler
    const persistentSeenHandler = async (data: MessageSeen) => {
      console.log('[ChatService] Default handler: Message seen through socketService');
      
      // Update message status in AsyncStorage
      await this.updateMessageStatus(data.messageId, 'seen');
      
      // Call the custom handler if one exists
      if (this.onMessageSeen) {
        this.onMessageSeen(data);
      }
    };
    
    // Add listeners for chat events
    const newMessageCleanup = socketService.addEventListener('new_message', persistentMessageHandler);
    
    // Verify event listener was added
    if (!newMessageCleanup) {
      console.error('[ChatService] Failed to add new_message event listener');
    } else {
      console.log('[ChatService] Added new_message event listener successfully');
    }
    
    const messageStatusCleanup = socketService.addEventListener('message_status', persistentStatusHandler);
    
    const messageSeenCleanup = socketService.addEventListener('message_seen', persistentSeenHandler);
    
    // Force refresh the connection status periodically
    const checkConnectionStatusInterval = setInterval(() => {
      // Get current socket info
      const socketInfo = socketService.getDebugInfo();
      const wasConnected = this.isConnected;
      
      // Only update our internal status if the socket is clearly connected or disconnected
      // If we're in the middle of a navigation or transition, don't update to prevent flashing
      if (socketInfo.connected === true) {
        // Socket is definitely connected
        this.isConnected = true;
      } else if (socketInfo.connected === false && !socketService.isReconnecting) {
        // Socket is definitely disconnected and not in the process of reconnecting
        this.isConnected = false;
      }
      
      // Only notify listeners if there's a definitive change in status
      if (wasConnected !== this.isConnected) {
        console.log(`[ChatService] Connection status changed to: ${this.isConnected}`);
        if (this.onConnectionChange) {
          this.onConnectionChange(this.isConnected);
        }
      }
    }, 5000);
    
    // Clean up in disconnect
    this._cleanupFunctions.push(() => {
      clearInterval(checkConnectionStatusInterval);
      newMessageCleanup();
      messageStatusCleanup();
      messageSeenCleanup();
    });
  }
  
  /**
   * Set up socket event listeners
   */
  private setupEventListeners(): void {
    if (!this.socket) return;
    
    // Connection events
    this.socket.on('connect', () => {
      console.log('[ChatService] Socket connected');
      this.isConnected = true;
      if (this.onConnectionChange) {
        this.onConnectionChange(true);
      }
    });
    
    this.socket.on('disconnect', () => {
      console.log('[ChatService] Socket disconnected');
      this.isConnected = false;
      if (this.onConnectionChange) {
        this.onConnectionChange(false);
      }
    });
    
    // Chat events
    this.socket.on('new_message', async (message: ChatMessage) => {
      console.log('[ChatService] New message received:', message);
      
      // Ensure the message has the properties we need
      if (!message || !message.messageId || !message.senderId || !message.recipientId) {
        console.error('[ChatService] Received malformed message:', message);
        return;
      }
      
      // Check and convert IDs to strings for local storage
      const enhancedMessage: ChatMessage = {
        ...message,
        // Ensure IDs are strings for our local storage
        senderId: String(message.senderId),
        recipientId: String(message.recipientId),
        // Ensure status is set
        status: message.status || 'delivered'
      };

      console.log('[ChatService] Enhanced message for storage:', enhancedMessage);
      
      // Store message in AsyncStorage
      await this.storeMessage(enhancedMessage);
      
      // Update conversations
      await this.updateConversation(enhancedMessage);
      
      // Ensure we notify listeners - this is critical for real-time updates
      if (this.onNewMessage) {
        console.log('[ChatService] Calling onNewMessage callback');
        this.onNewMessage(enhancedMessage);
      } else {
        console.log('[ChatService] No onNewMessage callback registered');
      }
      
      // Automatically mark as delivered
      this.socket?.emit('message_delivered', {
        messageId: message.messageId,
        senderId: message.senderId
      });
    });
    
    this.socket.on('message_status', async (status: MessageStatus) => {
      console.log('[ChatService] Message status update:', status);
      
      // Update message status in AsyncStorage
      await this.updateMessageStatus(status.messageId, status.status);
      
      if (this.onMessageStatus) {
        this.onMessageStatus(status);
      }
    });
    
    this.socket.on('message_seen', async (data: MessageSeen) => {
      console.log('[ChatService] Message seen:', data);
      
      // Update message status in AsyncStorage
      await this.updateMessageStatus(data.messageId, 'seen');
      
      if (this.onMessageSeen) {
        this.onMessageSeen(data);
      }
    });
  }
  
  /**
   * Store a message in AsyncStorage
   */
  private async storeMessage(message: ChatMessage): Promise<void> {
    try {
      // Make a copy of the message to avoid modifying the original
      const messageCopy: ChatMessage = {
        ...message,
        // Ensure IDs are strings
        senderId: String(message.senderId),
        recipientId: String(message.recipientId)
      };
      
      // Get existing messages
      const storedMessagesString = await AsyncStorage.getItem(MESSAGES_STORAGE_KEY);
      const storedMessages: Record<string, ChatMessage[]> = storedMessagesString 
        ? JSON.parse(storedMessagesString) 
        : {};
      
      // Create a key for this conversation (we store messages for each conversation separately)
      const conversationId = this.getConversationId(messageCopy.senderId, messageCopy.recipientId);
      
      console.log(`[ChatService] Storing message in conversation: ${conversationId}, direction: ${messageCopy.senderId} → ${messageCopy.recipientId}`);
      
      // Add message to conversation
      if (!storedMessages[conversationId]) {
        storedMessages[conversationId] = [];
      }
      
      // Check if we already have this message (by ID)
      const existingMessageIndex = storedMessages[conversationId].findIndex(
        msg => msg.messageId === messageCopy.messageId
      );
      
      if (existingMessageIndex >= 0) {
        // Update existing message but preserve the original sender/recipient IDs
        const existingMessage = storedMessages[conversationId][existingMessageIndex];
        storedMessages[conversationId][existingMessageIndex] = {
          ...messageCopy,
          // Preserve the original direction
          senderId: existingMessage.senderId,
          recipientId: existingMessage.recipientId,
          // Keep the best status - don't downgrade
          status: messageCopy.status === 'seen' ? 'seen' : 
                  existingMessage.status === 'seen' ? 'seen' :
                  messageCopy.status === 'delivered' ? 'delivered' :
                  existingMessage.status === 'delivered' ? 'delivered' :
                  messageCopy.status
        };
        console.log(`[ChatService] Updated existing message ${messageCopy.messageId}, preserved direction: ${existingMessage.senderId} → ${existingMessage.recipientId}, status: ${storedMessages[conversationId][existingMessageIndex].status}`);
      } else {
        // Add new message
        storedMessages[conversationId].push(messageCopy);
        console.log(`[ChatService] Added new message ${messageCopy.messageId} to conversation ${conversationId}, status: ${messageCopy.status}`);
      }
      
      // Save back to AsyncStorage
      await AsyncStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(storedMessages));
      
    } catch (error) {
      console.error('[ChatService] Error storing message:', error);
    }
  }
  
  /**
   * Update message status in AsyncStorage
   */
  private async updateMessageStatus(messageId: string, status: string): Promise<void> {
    try {
      // Get existing messages
      const storedMessagesString = await AsyncStorage.getItem(MESSAGES_STORAGE_KEY);
      if (!storedMessagesString) return;
      
      const storedMessages: Record<string, ChatMessage[]> = JSON.parse(storedMessagesString);
      
      // Look through all conversations for this message
      let updated = false;
      for (const conversationId in storedMessages) {
        const messages = storedMessages[conversationId];
        const messageIndex = messages.findIndex(msg => msg.messageId === messageId);
        
        if (messageIndex >= 0) {
          // Don't downgrade status
          const currentStatus = messages[messageIndex].status;
          if (
            (currentStatus === 'seen') ||
            (currentStatus === 'delivered' && status === 'sent')
          ) {
            console.log(`[ChatService] Not downgrading message ${messageId} from ${currentStatus} to ${status}`);
            return;
          }
          
          // Update message status
          messages[messageIndex].status = status as any;
          console.log(`[ChatService] Updated message ${messageId} status to ${status}`);
          updated = true;
          
          // Save back to AsyncStorage
          await AsyncStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(storedMessages));
          return;
        }
      }
      
      if (!updated) {
        console.log(`[ChatService] Message ${messageId} not found in any conversation`);
      }
    } catch (error) {
      console.error('[ChatService] Error updating message status:', error);
    }
  }
  
  /**
   * Update conversation metadata in AsyncStorage
   */
  private async updateConversation(message: ChatMessage): Promise<void> {
    try {
      // Determine if current user is sender or recipient
      let otherUserId: string;
      let isIncoming = false;
      
      if (message.senderId === this.currentUserId) {
        otherUserId = message.recipientId;
      } else {
        otherUserId = message.senderId;
        isIncoming = true;
      }
      
      // Get existing conversations
      const storedConversationsString = await AsyncStorage.getItem(CONVERSATIONS_STORAGE_KEY);
      const storedConversations: Record<string, Conversation> = storedConversationsString 
        ? JSON.parse(storedConversationsString) 
        : {};
      
      // Update or create conversation
      if (storedConversations[otherUserId]) {
        // Update existing conversation
        storedConversations[otherUserId].lastMessage = message.message;
        storedConversations[otherUserId].timestamp = message.timestamp;
        
        // Increment unread count for incoming messages
        if (isIncoming) {
          storedConversations[otherUserId].unreadCount += 1;
        }
      } else {
        // Try to get user data from AsyncStorage cache if available
        let userName = `User ${otherUserId}`;
        try {
          // Check if we have cached user details
          const userDataString = await AsyncStorage.getItem(`user_${otherUserId}`);
          if (userDataString) {
            const userData = JSON.parse(userDataString);
            if (userData.name) {
              userName = userData.name;
            }
          }
        } catch (error) {
          console.error('[ChatService] Error getting cached user data:', error);
        }
        
        // Create new conversation with the best name we have
        storedConversations[otherUserId] = {
          userId: otherUserId,
          name: userName,
          lastMessage: message.message,
          timestamp: message.timestamp,
          unreadCount: isIncoming ? 1 : 0
        };
      }
      
      // Save back to AsyncStorage
      await AsyncStorage.setItem(CONVERSATIONS_STORAGE_KEY, JSON.stringify(storedConversations));
      
    } catch (error) {
      console.error('[ChatService] Error updating conversation:', error);
    }
  }
  
  /**
   * Get a unique ID for a conversation between two users
   */
  private getConversationId(user1: string, user2: string): string {
    // Ensure both are strings
    const id1 = String(user1);
    const id2 = String(user2);
    // Sort IDs to ensure consistency regardless of who is sender/recipient
    const sortedIds = [id1, id2].sort();
    return `${sortedIds[0]}_${sortedIds[1]}`;
  }
  
  /**
   * Reset unread count for a conversation
   */
  public async markConversationAsRead(userId: string): Promise<void> {
    try {
      // Get existing conversations
      const storedConversationsString = await AsyncStorage.getItem(CONVERSATIONS_STORAGE_KEY);
      if (!storedConversationsString) return;
      
      const storedConversations: Record<string, Conversation> = JSON.parse(storedConversationsString);
      
      if (storedConversations[userId]) {
        storedConversations[userId].unreadCount = 0;
        
        // Save back to AsyncStorage
        await AsyncStorage.setItem(CONVERSATIONS_STORAGE_KEY, JSON.stringify(storedConversations));
      }
    } catch (error) {
      console.error('[ChatService] Error marking conversation as read:', error);
    }
  }
  
  /**
   * Initialize a chat with a user
   */
  public async initChat(userId: string): Promise<{
    success: boolean;
    user?: ChatUser;
    error?: string;
  }> {
    try {
      // Mark conversation as read
      await this.markConversationAsRead(userId);
      
      // In a real backend, we'd check if this user accepts messages
      // For now, we'll just return success
      return { 
        success: true, 
        user: {
          id: userId,
          name: `User ${userId}`,
          enableDms: true
        }
      };
    } catch (error) {
      console.error('[ChatService] Error initializing chat:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Error initializing chat'
      };
    }
  }
  
  /**
   * Get the list of conversations for the current user
   */
  public async getConversations(): Promise<{
    success: boolean;
    conversations?: Conversation[];
    error?: string;
  }> {
    try {
      // Get conversations from AsyncStorage
      const storedConversationsString = await AsyncStorage.getItem(CONVERSATIONS_STORAGE_KEY);
      
      if (!storedConversationsString) {
        return { success: true, conversations: [] };
      }
      
      const storedConversations: Record<string, Conversation> = JSON.parse(storedConversationsString);
      
      // Convert to array and sort by timestamp (most recent first)
      const conversations = Object.values(storedConversations).sort((a, b) => {
        return (b.timestamp || 0) - (a.timestamp || 0);
      });
      
      return { success: true, conversations };
    } catch (error) {
      console.error('[ChatService] Error getting conversations:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Error fetching conversations'
      };
    }
  }
  
  /**
   * Get message history for a conversation
   */
  public async getMessageHistory(userId: string): Promise<{
    success: boolean;
    messages?: ChatMessage[];
    error?: string;
  }> {
    try {
      if (!this.currentUserId) {
        // First try to get from socketService
        const authData = socketService.getAuthData();
        if (authData) {
          this.currentUserId = authData.userId;
        } else {
          // Try to get user ID directly from AsyncStorage
          try {
            const userData = await AsyncStorage.getItem('userData');
            if (userData) {
              const parsedUserData = JSON.parse(userData);
              if (parsedUserData.id) {
                this.currentUserId = parsedUserData.id;
                console.log('[ChatService] Retrieved user ID from AsyncStorage:', this.currentUserId);
              }
            }
          } catch (storageError) {
            console.error('[ChatService] Error getting user data from AsyncStorage:', storageError);
          }
          
          // If still no user ID, check the token for user info
          if (!this.currentUserId) {
            const token = await AsyncStorage.getItem('token');
            if (token) {
              // Token exists, so user is authenticated even if we can't get the ID
              console.log('[ChatService] User has valid token but ID is unavailable');
              // As a last resort, create a temporary ID from the token
              this.currentUserId = `temp_${token.substring(0, 8)}`;
            } else {
              return { success: false, error: 'Current user not authenticated' };
            }
          }
        }
      }
      
      // Ensure IDs are strings for consistent comparison
      const currentId = String(this.currentUserId);
      const otherUserId = String(userId);
      
      // Add check to prevent self-conversations
      if (currentId === otherUserId) {
        console.warn(`[ChatService] Attempted to fetch conversation with self (ID: ${currentId}), returning empty messages`);
        return { success: true, messages: [] };
      }
      
      // Create conversation ID
      const conversationId = this.getConversationId(currentId, otherUserId);
      console.log(`[ChatService] Fetching messages for conversation ID: ${conversationId} (current: ${currentId}, other: ${otherUserId})`);
      
      // Get messages from AsyncStorage
      const storedMessagesString = await AsyncStorage.getItem(MESSAGES_STORAGE_KEY);
      
      if (!storedMessagesString) {
        console.log('[ChatService] No stored messages found');
        return { success: true, messages: [] };
      }
      
      const storedMessages: Record<string, ChatMessage[]> = JSON.parse(storedMessagesString);
      console.log(`[ChatService] Found stored message conversations:`, Object.keys(storedMessages));
      
      // Get messages for this conversation
      const messages = storedMessages[conversationId] || [];
      console.log(`[ChatService] Retrieved ${messages.length} messages for conversation ${conversationId}`);
      
      // Debug first few messages
      if (messages.length > 0) {
        messages.slice(0, 3).forEach((msg, i) => {
          console.log(`[ChatService] Message ${i}: senderId=${msg.senderId}, recipientId=${msg.recipientId}, status=${msg.status}`);
        });
      }
      
      // Mark the conversation as read
      await this.markConversationAsRead(otherUserId);
      
      // Sort by timestamp
      const sortedMessages = [...messages].sort((a, b) => a.timestamp - b.timestamp);
      
      // Critical: Fix any message directionality issues by ensuring IDs are exactly preserved
      const finalMessages = sortedMessages.map(msg => {
        // Create a deep copy to avoid modifying the original
        return {
          ...msg,
          // Ensure IDs are preserved exactly as stored
          senderId: String(msg.senderId),
          recipientId: String(msg.recipientId),
          // Ensure status is preserved
          status: msg.status || 'delivered'
        };
      });
      
      // Mark other user's messages as seen since we're viewing the conversation
      for (const msg of finalMessages) {
        // If this is a message from the other user and not already seen
        if (String(msg.senderId) === otherUserId && msg.status !== 'seen') {
          await this.markMessageAsSeen(msg.messageId, msg.senderId);
        }
      }
      
      return { success: true, messages: finalMessages };
    } catch (error) {
      console.error('[ChatService] Error getting message history:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : 'Error fetching message history'
      };
    }
  }
  
  /**
   * Send a message to a user
   */
  public async sendMessage(recipientId: string, message: string): Promise<string> {
    console.log(`[ChatService] sendMessage called: to=${recipientId}, message=${message.substring(0, 20)}...`);
    
    // Check if we're connected
    const socketInfo = socketService.getDebugInfo();
    if (!socketInfo.connected) {
      console.error('[ChatService] Cannot send message: socket not connected');
      throw new Error('Socket not connected');
    }
    
    // Ensure we have currentUserId
    if (!this.currentUserId) {
      const authData = socketService.getAuthData();
      if (authData) {
        this.currentUserId = authData.userId;
      } else {
        // Try to retrieve from storage
        await this.retrieveUserIdFromStorage();
        
        // If still no user ID, throw an error
        if (!this.currentUserId) {
          throw new Error('Current user not authenticated');
        }
      }
    }
    
    // NOTE: We need to preserve the original ID types for socket communication
    // We'll convert to strings only for our local storage
    const senderId = this.currentUserId;
    // For recipient, use the original format since that's what the server expects
    const recipient = recipientId;
    
    const messageId = `local_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // Create the socket event data exactly as the server expects it
    const socketEventData = {
      recipientId: recipient,  // Keep original format
      message,
      messageId
    };
    
    // Create message object with string IDs for our local storage
    const newMessage: ChatMessage = {
      messageId,
      senderId: String(senderId),  // Convert to string for local storage
      recipientId: String(recipient),  // Convert to string for local storage
      message,
      timestamp: Date.now(),
      status: 'sent'
    };
    
    console.log(`[ChatService] Sending message: ${newMessage.senderId} → ${newMessage.recipientId}: "${message.substring(0, 20)}..."`);
    console.log(`[ChatService] Socket event data:`, JSON.stringify(socketEventData));
    
    // Store locally first
    await this.storeMessage(newMessage);
    
    // Update conversation
    await this.updateConversation(newMessage);
    
    // Send via socketService
    const sent = socketService.emitEvent('send_message', socketEventData);
    
    if (sent) {
      console.log('[ChatService] Message sent through socketService successfully');
      

      
    } else {
      console.warn('[ChatService] Failed to send through socketService, but message is stored locally');
      // Update the message status to indicate it's stored locally but not sent
      await this.updateMessageStatus(messageId, 'failed');
    }
    
    return messageId;
  }
  
  /**
   * Mark a message as seen
   */
  public async markMessageAsSeen(messageId: string, senderId: string): Promise<void> {
    // Update locally first
    await this.updateMessageStatus(messageId, 'seen');
    
    // Send to server using socketService instead of direct socket
    socketService.emitEvent('message_seen', {
      messageId,
      senderId
    });
  }
  
  /**
   * Set callback for new messages
   * This is used by UI components to receive updates when visible
   * Messages will still be stored in AsyncStorage even if no callback is set
   */
  public setOnNewMessage(callback: (message: ChatMessage) => void): void {
    this.onNewMessage = callback;
  }
  
  /**
   * Set callback for message status updates
   * This is used by UI components to receive updates when visible
   * Status updates will still be stored in AsyncStorage even if no callback is set
   */
  public setOnMessageStatus(callback: (status: MessageStatus) => void): void {
    this.onMessageStatus = callback;
  }
  
  /**
   * Set callback for message seen events
   * This is used by UI components to receive updates when visible
   * Seen status will still be stored in AsyncStorage even if no callback is set
   */
  public setOnMessageSeen(callback: (data: MessageSeen) => void): void {
    this.onMessageSeen = callback;
  }
  
  /**
   * Set callback for connection status changes
   */
  public setOnConnectionChange(callback: (connected: boolean) => void): void {
    this.onConnectionChange = callback;
  }
  
  /**
   * Disconnect the socket
   */
  public disconnect(): void {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
    }
    this.isConnected = false;
    
    // Run all cleanup functions
    this._cleanupFunctions.forEach(cleanup => cleanup());
    this._cleanupFunctions = [];
  }
  
  /**
   * Check if socket is connected
   */
  public isSocketConnected(): boolean {
    return this.isConnected;
  }
  
  /**
   * Clear all chat data (for testing/debugging)
   */
  public async clearAllChatData(): Promise<void> {
    try {
      await AsyncStorage.removeItem(MESSAGES_STORAGE_KEY);
      await AsyncStorage.removeItem(CONVERSATIONS_STORAGE_KEY);
      console.log('[ChatService] All chat data cleared');
    } catch (error) {
      console.error('[ChatService] Error clearing chat data:', error);
    }
  }
}

// Create and export singleton instance
export const chatService = new ChatService();
export default chatService; 